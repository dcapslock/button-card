name: Release

on: workflow_dispatch

env:
  NODE_VERSION: '24.x'
  PYTHON_VERSION: '3.13'

jobs:
  release-bundle:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'

    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - uses: actions/checkout@v5
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.OS }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-${{ env.NODE_VERSION }}
            ${{ runner.OS }}-
      - name: Install yarn for ACT (local testing)
        if: ${{ env.ACT }}
        run: npm install -g yarn
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Release docs
      - name: Setup python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: docs/requirements.txt
      - name: Install python dependencies
        run: pip install -r docs/requirements.txt
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - name: Build and publish dev documentation
        if: github.ref == 'refs/heads/dev'
        run: |
          git pull
          cd docs
          mike deploy -u -p --allow-empty dev
      - name: Build and publish stable documentation
        if: github.ref == 'refs/heads/master'
        run: |
          git pull
          echo "Getting version from package.json"
          cat package.json | jq -r .version
          echo "Publishing documentation (only major.minor)"
          VERSION=$(cat package.json | jq -r .version | cut -d '.' -f 1,2)
          cd docs
          mike deploy -u -p --allow-empty "v${VERSION}" stable
